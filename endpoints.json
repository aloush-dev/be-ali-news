{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },

  "GET /api/topics": {
    "description": "serves an array of all topics",
    "queries": [],
    "exampleResponse": {
      "topics": [{ "slug": "football", "description": "FOOTIE!" }]
    }
  },
  "GET /api/users": {
    "description": "serves an array of all users",
    "queries": [],
    "exampleResponse": {
      "users": [
        { "username": "butter_bridge" },
        { "username": "icellusedkars" },
        { "username": "rogersop" },
        { "username": "lurker" }
      ]
    }
  },
  "GET /api/articles": {
    "description": "serves an array of all articles",
    "queries": ["topic", "sort_by", "order"],
    "exampleResponse": {
      "article": [
        {
          "article_id": 3,
          "title": "Eight pug gifs that remind me of mitch",
          "topic": "mitch",
          "author": "icellusedkars",
          "body": "some gifs",
          "created_at": "2020-11-03T09:12:00.000Z",
          "votes": 0,
          "comment_count": 2
        }
      ]
    }
  },
  "GET /api/articles/article_id": {
    "description": "serves an article object with the given article id",
    "queries": ["author", "topic", "sort_by", "order"],
    "exampleResponse": {
      "articles": [
        {
          "title": "Making sense of Redux",
          "topic": "coding",
          "author": "jessjelly",
          "body": "When I first started learning React, I remember reading lots of articles about the different technologies associated with it. In particular, this one article stood out. It mentions how confusing the ecosystem is, and how developers often feel they have to know ALL of the ecosystem before using React. And as someone who’s used React daily for the past 8 months or so, I can definitely say that I’m still barely scratching the surface in terms of understanding how the entire ecosystem works! But my time spent using React has given me some insight into when and why it might be appropriate to use another technology — Redux (a variant of the Flux architecture).",
          "created_at": 1599858720000
        }
      ]
    }
  },
  "GET /api/articles/article_id/comments": {
    "description": "serves an array of all comments associated with a given article id",
    "queries": [],
    "exampleResponse": {
      "comments": [
        {
          "comment_id": 2,
          "body": "The beautiful thing about treasure is that it exists. Got to find out what kind of sheets these are; not cotton, not rayon, silky.",
          "article_id": 1,
          "author": "butter_bridge",
          "votes": 14,
          "created_at": "2020-10-31T03:03:00.000Z"
        }
      ]
    }
  },
  "PATCH /api/articles/article_id": {
    "description": "Accepts an object and returns an article with the votes updated according to the given object",
    "givenObject": { "inc_votes": 10 },
    "queries": [],
    "exampleResponse": {
      "articles": [
        {
          "article_id": 1,
          "title": "Living in the shadow of a great man",
          "topic": "mitch",
          "author": "butter_bridge",
          "body": "I find this existence challenging",
          "created_at": "'2020-07-09T20:11:00.000Z'",
          "votes": 110
        }
      ]
    }
  },
  "POST /api/articles/article_id/comments": {
    "description": "takes a given object and adds the comment to the database, serves an object with the given comment",
    "givenObject": { "username": "lurker", "body": "this article sucks!" },
    "queries": [],
    "exampleResponse": {
      "comment": {
        "comment_id": 19,
        "body": "this article sucks!",
        "article_id": 1,
        "author": "lurker",
        "votes": 0,
        "created_at": "2022-05-19T13:24:56.484Z"
      }
    }
  },
  "DELETE /api/comments/comment_id": {
    "description": "Deletes the comment with the associated comment id returns no response",
    "queries": [],
    "exampleResponse": {}
  }
}
